// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcControl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControlClient is the client API for Control service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlClient interface {
	ControlConnection(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (Control_ControlConnectionClient, error)
}

type controlClient struct {
	cc grpc.ClientConnInterface
}

func NewControlClient(cc grpc.ClientConnInterface) ControlClient {
	return &controlClient{cc}
}

func (c *controlClient) ControlConnection(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (Control_ControlConnectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Control_ServiceDesc.Streams[0], "/Slate1.v1.control.Control/ControlConnection", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlControlConnectionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Control_ControlConnectionClient interface {
	Recv() (*ControlResponse, error)
	grpc.ClientStream
}

type controlControlConnectionClient struct {
	grpc.ClientStream
}

func (x *controlControlConnectionClient) Recv() (*ControlResponse, error) {
	m := new(ControlResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControlServer is the server API for Control service.
// All implementations must embed UnimplementedControlServer
// for forward compatibility
type ControlServer interface {
	ControlConnection(*EmptyRequest, Control_ControlConnectionServer) error
	mustEmbedUnimplementedControlServer()
}

// UnimplementedControlServer must be embedded to have forward compatible implementations.
type UnimplementedControlServer struct {
}

func (UnimplementedControlServer) ControlConnection(*EmptyRequest, Control_ControlConnectionServer) error {
	return status.Errorf(codes.Unimplemented, "method ControlConnection not implemented")
}
func (UnimplementedControlServer) mustEmbedUnimplementedControlServer() {}

// UnsafeControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlServer will
// result in compilation errors.
type UnsafeControlServer interface {
	mustEmbedUnimplementedControlServer()
}

func RegisterControlServer(s grpc.ServiceRegistrar, srv ControlServer) {
	s.RegisterService(&Control_ServiceDesc, srv)
}

func _Control_ControlConnection_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlServer).ControlConnection(m, &controlControlConnectionServer{stream})
}

type Control_ControlConnectionServer interface {
	Send(*ControlResponse) error
	grpc.ServerStream
}

type controlControlConnectionServer struct {
	grpc.ServerStream
}

func (x *controlControlConnectionServer) Send(m *ControlResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Control_ServiceDesc is the grpc.ServiceDesc for Control service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Control_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Slate1.v1.control.Control",
	HandlerType: (*ControlServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ControlConnection",
			Handler:       _Control_ControlConnection_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "control.proto",
}
